#!/usr/bin/env bash

# Set some useful variables
this_script_abs_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"

# Set some defaults
word_list_file="$HOME/.pottymouth"
make_git_hook="false"
modified_files_only="true"
help="false"

# Set default flags for within a potential git hook.
word_list_file_flag=""
modified_files_only_flag=""

# Parse command line options
while getopts ":hf:ag" Option
do
    case $Option in
        h) help="true";;
        f) word_list_file="${OPTARG}"
           word_list_file_flag="-f ${OPTARG}"
           ;;
        a) modified_files_only="false"
           modified_files_only_flag="-a"
           ;;
        g) make_git_hook="true";;
    esac
done


function usage {
    echo "usage: $0 [-h] [-f] [-a] [-g]
    -h: Show this help message.

    -f <wordlist>: Specify a word-list file.  Defaults to ~/.pottymouth .
    -a: Check all files in the repo.  Defaults to only checking modified files.

    -g: Make a git pre-commit hook.  That hook will use the remainder of the options if specified (-f, -a, ...)"
    exit 2
}


function get_git_root {
    git rev-parse --show-toplevel
}


function get_pre_commit_hook_path {
    echo "$(get_git_root)/.git/hooks/pre-commit"
}


function make_git_hook {
    hook_file="$(get_pre_commit_hook_path)"

    # Backup old pre-commit hook
    [[ -f "${hook_file}" ]] && echo "backing up old pre-commit hook" && mv "${hook_file}" "${hook_file}.backup"

    # Now write the pre-commit hook
    echo "#!/usr/bin/env bash

${this_script_abs_path} ${word_list_file_flag} ${modified_files_only_flag}
exit \$?
" > "${hook_file}"
    chmod a+x "${hook_file}"
}


function ensure_word_file {
    # Ensure we have a word file to grep off of.
    if [[ ! -r "${word_list_file}" ]] ; then
        echo "Creating pottymouth word list: ${word_list_file}"
        echo "poop" > "${word_list_file}"
    fi
}


function get_grep_targets {
    if [[ ${modified_files_only} == "true" ]] ; then
        # Find all the files that have changed.
        git diff --name-only
    else
        # Make sure we start our recursive grep at the root of the git repo.
        echo "-r $(get_git_root)"
    fi
}


function main {
    [[ ${help} == "true" ]] && usage

    ensure_word_file

    if [[ ${make_git_hook} == "true" ]] ; then
        make_git_hook
        exit $?
    fi


    found_words=$(grep -f "${word_list_file}" -iEn $(get_grep_targets))
    if [[ -n "${found_words}" ]]; then
        echo "found pottymouth words:"
        echo "-----------------------"
        echo "${found_words}"
        exit 1
    fi
    exit 0
}


main
